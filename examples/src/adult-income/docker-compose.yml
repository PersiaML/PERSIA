version: "3.2"
services:
  persia_nats_service:
    image: nats:latest
    deploy:
      replicas: 1
          
  data_loader:
    env_file:
      - .docker.env
    environment:
        TASK_SLOT_ID: "{{.Task.Slot}}"
        REPLICAS: 1
    depends_on:
      - nn_worker
      - embedding_worker
      - persia_nats_service
    image: ${IMAGE_PREFIX}persia-cuda-runtime:${IMAGE_TAG}
    command: persia-launcher data-loader /workspace/data_loader.py
    volumes:
      - type: bind
        source: .
        target: /workspace
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  nn_worker:
    env_file:
      - .docker.env
    environment:
      TASK_SLOT_ID: "{{.Task.Slot}}"
      NCCL_SOCKET_IFNAME: eth0
      CUBLAS_WORKSPACE_CONFIG: :4096:8
      REPLICAS: 1
    image: ${IMAGE_PREFIX}persia-cuda-runtime:${IMAGE_TAG}
    command: bash -c "persia-launcher nn-worker /workspace/train.py --nproc-per-node $$NPROC_PER_NODE --node-rank $$(($$TASK_SLOT_ID - 1)) --nnodes 1"
    volumes:
      - type: bind
        source: .
        target: /workspace
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  embedding_worker:
    env_file:
      - .docker.env
    environment:
      TASK_SLOT_ID: "{{.Task.Slot}}" 
      REPLICAS: 1
    depends_on:
      - server
    image: ${IMAGE_PREFIX}persia-cuda-runtime:${IMAGE_TAG}
    command: persia-launcher embedding-worker --embedding-config /workspace/config/embedding_config.yml --global-config /workspace/config/global_config.yml
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - type: bind
        source: .
        target: /workspace

  server:
    env_file:
      - .docker.env
    environment:
      TASK_SLOT_ID: "{{.Task.Slot}}"
      REPLICAS: 1
    image: ${IMAGE_PREFIX}persia-cuda-runtime:${IMAGE_TAG}
    command: persia-launcher embedding-parameter-server --embedding-config /workspace/config/embedding_config.yml --global-config /workspace/config/global_config.yml
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    volumes:
      - type: bind
        source: .
        target: /workspace